I"<h1 id="문제-설명">문제 설명</h1>

<p>스파이들은 매일 다른 옷을 조합하여 입어 자신을 위장합니다.</p>

<p>예를 들어 스파이가 가진 옷이 아래와 같고 오늘 스파이가 동그란 안경, 긴 코트, 파란색 티셔츠를 입었다면 다음날은 청바지를 추가로 입거나 동그란 안경 대신 검정 선글라스를 착용하거나 해야 합니다.</p>

<table>
  <thead>
    <tr>
      <th>종류</th>
      <th>이름</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>얼굴</td>
      <td>동그란 안경, 검정 선글라스</td>
    </tr>
    <tr>
      <td>상의</td>
      <td>파란색 티셔츠</td>
    </tr>
    <tr>
      <td>하의</td>
      <td>청바지</td>
    </tr>
    <tr>
      <td>겉옷</td>
      <td>긴 코트</td>
    </tr>
  </tbody>
</table>

<p><br />
스파이가 가진 의상들이 담긴 2차원 배열 clothes가 주어질 때 서로 다른 옷의 조합의 수를 return 하도록 solution 함수를 작성해주세요.</p>

<p><br /><br />
제한사항</p>
<ul>
  <li>clothes의 각 행은 [의상의 이름, 의상의 종류]로 이루어져 있습니다.</li>
  <li>스파이가 가진 의상의 수는 1개 이상 30개 이하입니다.</li>
  <li>같은 이름을 가진 의상은 존재하지 않습니다.</li>
  <li>clothes의 모든 원소는 문자열로 이루어져 있습니다.</li>
  <li>모든 문자열의 길이는 1 이상 20 이하인 자연수이고 알파벳 소문자 또는 ‘_’ 로만 이루어져 있습니다.</li>
  <li>스파이는 하루에 최소 한 개의 의상은 입습니다.</li>
</ul>

<table>
  <thead>
    <tr>
      <th>clothes</th>
      <th>return</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>[[“yellowhat”, “headgear”], [“bluesunglasses”, “eyewear”], [“green_turban”, “headgear”]]</td>
      <td>5</td>
    </tr>
    <tr>
      <td>[[“crowmask”, “face”], [“bluesunglasses”, “face”], [“smoky_makeup”, “face”]]</td>
      <td>3</td>
    </tr>
  </tbody>
</table>

<p><br /><br /></p>

<p>입출력 예 설명<br />
예제 #1<br />
headgear에 해당하는 의상이 yellow_hat, green_turban이고 eyewear에 해당하는 의상이 blue_sunglasses이므로 아래와 같이 5개의 조합이 가능합니다.</p>

<ol>
  <li>yellow_hat</li>
  <li>blue_sunglasses</li>
  <li>green_turban</li>
  <li>yellow_hat + blue_sunglasses</li>
  <li>green_turban + blue_sunglasses</li>
</ol>

<p>예제 #2<br />
face에 해당하는 의상이 crow_mask, blue_sunglasses, smoky_makeup이므로 아래와 같이 3개의 조합이 가능합니다.</p>

<ol>
  <li>crow_mask</li>
  <li>blue_sunglasses</li>
  <li>smoky_makeup</li>
</ol>

<p><br /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">combinations</span>
<span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">Counter</span>

<span class="k">def</span> <span class="nf">solution</span><span class="p">(</span><span class="n">clothes</span><span class="p">):</span>
    <span class="n">dic</span> <span class="o">=</span> <span class="p">{}</span>
    
    <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">clothes</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">dic</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">c</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="o">==</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">dic</span><span class="p">[</span><span class="n">c</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span> <span class="o">=</span> <span class="mi">1</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">dic</span><span class="p">[</span><span class="n">c</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span> <span class="o">+=</span> <span class="mi">1</span>
    
    <span class="n">com</span> <span class="o">=</span> <span class="mi">1</span>
    
    <span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">val</span> <span class="ow">in</span> <span class="n">dic</span><span class="p">.</span><span class="n">items</span><span class="p">():</span>
        <span class="n">com</span> <span class="o">*=</span> <span class="n">val</span> <span class="o">+</span> <span class="mi">1</span>
    <span class="k">return</span> <span class="n">com</span> <span class="o">-</span> <span class="mi">1</span>
</code></pre></div></div>
:ET