I"_(<h1 id="문제-설명">문제 설명</h1>

<p>카카오에 입사한 신입 개발자 네오는 “카카오계정개발팀”에 배치되어, 카카오 서비스에 가입하는 유저들의 아이디를 생성하는 업무를 담당하게 되었습니다. “네오”에게 주어진 첫 업무는 새로 가입하는 유저들이 카카오 아이디 규칙에 맞지 않는 아이디를 입력했을 때, 입력된 아이디와 유사하면서 규칙에 맞는 아이디를 추천해주는 프로그램을 개발하는 것입니다.</p>

<p>다음은 카카오 아이디의 규칙입니다.</p>

<ul>
  <li>아이디의 길이는 3자 이상 15자 이하여야 합니다.</li>
  <li>아이디는 알파벳 소문자, 숫자, 빼기(-), 밑줄(_), 마침표(.) 문자만 사용할 수 있습니다.</li>
  <li>단, 마침표(.)는 처음과 끝에 사용할 수 없으며 또한 연속으로 사용할 수 없습니다.</li>
</ul>

<p>“네오”는 다음과 같이 7단계의 순차적인 처리 과정을 통해 신규 유저가 입력한 아이디가 카카오 아이디 규칙에 맞는 지 검사하고 규칙에 맞지 않은 경우 규칙에 맞는 새로운 아이디를 추천해 주려고 합니다.
신규 유저가 입력한 아이디가 new_id 라고 한다면,</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1단계 new_id의 모든 대문자를 대응되는 소문자로 치환합니다.  
2단계 new_id에서 알파벳 소문자, 숫자, 빼기(-), 밑줄(_), 마침표(.)를 제외한 모든 문자를 제거합니다.  
3단계 new_id에서 마침표(.)가 2번 이상 연속된 부분을 하나의 마침표(.)로 치환합니다.  
4단계 new_id에서 마침표(.)가 처음이나 끝에 위치한다면 제거합니다.  
5단계 new_id가 빈 문자열이라면, new_id에 "a"를 대입합니다.  
6단계 new_id의 길이가 16자 이상이면, new_id의 첫 15개의 문자를 제외한 나머지 문자들을 모두 제거합니다.  
    만약 제거 후 마침표(.)가 new_id의 끝에 위치한다면 끝에 위치한 마침표(.) 문자를 제거합니다.  
7단계 new_id의 길이가 2자 이하라면, new_id의 마지막 문자를 new_id의 길이가 3이 될 때까지 반복해서 끝에 붙입니다.  
</code></pre></div></div>

<p>예를 들어, new_id 값이 “…!@BaT#*..y.abcdefghijklm” 라면, 위 7단계를 거치고 나면 new_id는 아래와 같이 변경됩니다.</p>

<p>1단계 대문자 ‘B’와 ‘T’가 소문자 ‘b’와 ‘t’로 바뀌었습니다.
“…!@BaT#<em>..y.abcdefghijklm” → “…!@bat#</em>..y.abcdefghijklm”</p>

<p>2단계 ‘!’, ‘@’, ‘#’, ‘<em>’ 문자가 제거되었습니다.
“…!@bat#</em>..y.abcdefghijklm” → “…bat..y.abcdefghijklm”</p>

<p>3단계 ‘…‘와 ‘..’ 가 ‘.’로 바뀌었습니다.
“…bat..y.abcdefghijklm” → “.bat.y.abcdefghijklm”</p>

<p>4단계 아이디의 처음에 위치한 ‘.’가 제거되었습니다.
“.bat.y.abcdefghijklm” → “bat.y.abcdefghijklm”</p>

<p>5단계 아이디가 빈 문자열이 아니므로 변화가 없습니다.
“bat.y.abcdefghijklm” → “bat.y.abcdefghijklm”</p>

<p>6단계 아이디의 길이가 16자 이상이므로, 처음 15자를 제외한 나머지 문자들이 제거되었습니다.
“bat.y.abcdefghijklm” → “bat.y.abcdefghi”</p>

<p>7단계 아이디의 길이가 2자 이하가 아니므로 변화가 없습니다.
“bat.y.abcdefghi” → “bat.y.abcdefghi”</p>

<p>따라서 신규 유저가 입력한 new_id가 “…!@BaT#*..y.abcdefghijklm”일 때, 네오의 프로그램이 추천하는 새로운 아이디는 “bat.y.abcdefghi” 입니다.</p>

<p>[문제]
신규 유저가 입력한 아이디를 나타내는 new_id가 매개변수로 주어질 때, “네오”가 설계한 7단계의 처리 과정을 거친 후의 추천 아이디를 return 하도록 solution 함수를 완성해 주세요.</p>

<p>[제한사항]
new_id는 길이 1 이상 1,000 이하인 문자열입니다.
new_id는 알파벳 대문자, 알파벳 소문자, 숫자, 특수문자로 구성되어 있습니다.
new_id에 나타날 수 있는 특수문자는 -_.~!@#$%^&amp;*()=+[{]}:?,&lt;&gt;/ 로 한정됩니다.</p>

<p>[입출력 예]</p>

<table>
  <thead>
    <tr>
      <th>no</th>
      <th>new_id</th>
      <th>result</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>예1</td>
      <td>“…!@BaT#*..y.abcdefghijklm”</td>
      <td>“bat.y.abcdefghi”</td>
    </tr>
    <tr>
      <td>예2</td>
      <td>“z-+.^.”</td>
      <td>“z–”</td>
    </tr>
    <tr>
      <td>예3</td>
      <td>”=.=”</td>
      <td>“aaa”</td>
    </tr>
    <tr>
      <td>예4</td>
      <td>“123_.def”</td>
      <td>“123_.def”</td>
    </tr>
    <tr>
      <td>예5</td>
      <td>“abcdefghijklmn.p”</td>
      <td>“abcdefghijklmn”</td>
    </tr>
  </tbody>
</table>

<p>입출력 예 #1
문제의 예시와 같습니다.</p>

<p>입출력 예 #2
7단계를 거치는 동안 new_id가 변화하는 과정은 아래와 같습니다.</p>

<p>1단계 변화 없습니다.
2단계 “z-+.^.” → “z-..”
3단계 “z-..” → “z-.”
4단계 “z-.” → “z-“
5단계 변화 없습니다.
6단계 변화 없습니다.
7단계 “z-“ → “z–”</p>

<p>입출력 예 #3
7단계를 거치는 동안 new_id가 변화하는 과정은 아래와 같습니다.</p>

<p>1단계 변화 없습니다.
2단계 “=.=” → “.”
3단계 변화 없습니다.
4단계 “.” → “” (new_id가 빈 문자열이 되었습니다.)
5단계 “” → “a”
6단계 변화 없습니다.
7단계 “a” → “aaa”</p>

<p>입출력 예 #4
1단계에서 7단계까지 거치는 동안 new_id(“123_.def”)는 변하지 않습니다. 즉, new_id가 처음부터 카카오의 아이디 규칙에 맞습니다.</p>

<p>입출력 예 #5
1단계 변화 없습니다.
2단계 변화 없습니다.
3단계 변화 없습니다.
4단계 변화 없습니다.
5단계 변화 없습니다.
6단계 “abcdefghijklmn.p” → “abcdefghijklmn.” → “abcdefghijklmn”
7단계 변화 없습니다</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">re</span>

<span class="k">def</span> <span class="nf">solution</span><span class="p">(</span><span class="n">new_id</span><span class="p">):</span>
    <span class="n">answer</span> <span class="o">=</span> <span class="n">new_id</span><span class="p">.</span><span class="n">lower</span><span class="p">()</span>
    <span class="n">answer</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="n">sub</span><span class="p">(</span><span class="s">'[\~\!\@\#\$\%\^\&amp;\*\(\)\=\+\[\{\]\}\:\?\,\&lt;\&gt;\/]'</span><span class="p">,</span> <span class="s">''</span><span class="p">,</span> <span class="n">answer</span><span class="p">)</span>
    <span class="n">answer</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="n">sub</span><span class="p">(</span><span class="s">'[.]{2,1000}'</span><span class="p">,</span><span class="s">'.'</span><span class="p">,</span><span class="n">answer</span><span class="p">)</span>
    <span class="n">answer</span> <span class="o">=</span> <span class="n">cut_point</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>
  
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">15</span><span class="p">:</span>
        <span class="n">answer</span> <span class="o">=</span> <span class="n">answer</span><span class="p">[:</span><span class="mi">15</span><span class="p">]</span>
        <span class="n">answer</span> <span class="o">=</span> <span class="n">cut_point</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>
    <span class="k">elif</span> <span class="nb">len</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">:</span>
        <span class="k">while</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">):</span>
            <span class="n">answer</span> <span class="o">+=</span> <span class="n">answer</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
  
    <span class="k">return</span> <span class="n">answer</span>

<span class="k">def</span> <span class="nf">cut_point</span><span class="p">(</span><span class="n">string</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">string</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="s">"."</span><span class="p">:</span>
        <span class="n">string</span> <span class="o">=</span> <span class="n">string</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>
        <span class="k">if</span> <span class="n">string</span> <span class="o">==</span> <span class="s">""</span><span class="p">:</span>
            <span class="n">string</span> <span class="o">=</span> <span class="s">"a"</span>
    <span class="k">if</span> <span class="n">string</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="s">"."</span><span class="p">:</span>
        <span class="n">string</span> <span class="o">=</span> <span class="n">string</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        <span class="k">if</span> <span class="n">string</span> <span class="o">==</span> <span class="s">""</span><span class="p">:</span>
            <span class="n">string</span> <span class="o">=</span> <span class="s">"a"</span>
  
    <span class="k">return</span> <span class="n">string</span>
</code></pre></div></div>
:ET